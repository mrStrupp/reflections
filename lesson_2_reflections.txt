1. What happens when you initialize a repository? Why do you need to do it?
    When you initialize a repository Git creates a folder, where it saves the history of the commits.

2. How is the staging area different from the working directory and the repository? What value do you
   think it offers?
    With the staging area you can choose what files you want to add to the commit, if you worked on
    different things in different files, but did not commit, you can still separate it.

3. How can you use the staging area to make sure you have one commit per logical change?
    You can check the status and see what will be commited.

4. What are some situations when branches would be helpful in keeping your history organized? How
   would branches help?
    Situations are, for example, when you want to make an easier version of a game, but don't want to
    change the difficult one. So you create a new branch where you can develop an easier version along
    with the difficult one.

5. How do the diagrams help you visualize the branch structure?
    You can easily see the branch structure and see, what commits are reachable in a branch.

6. What is the result of merging two branches together? Why do we represent it in the diagram the way
   we do?
    The result is, that the changes of both branches are merged together. The presentation in the diagram
    shows very good, that these branches get together again.

7. What are the pros and cons of Git's automatic merging vs. always doing merges manually?
    idk.

tSS